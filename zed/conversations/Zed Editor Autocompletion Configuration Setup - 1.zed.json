{"id":"6772989d-d15b-4b21-a6c0-46dab9e2e6f2","zed":"context","version":"0.4.0","text":"\n\nhow can i get autocompletion in zed \nIn Zed, there are several ways to get autocompletion:\n\n1. Basic Autocompletion:\n- Just start typing and Zed will automatically show suggestions\n- Press Tab or Enter to accept a suggestion\n\n2. Language Server Protocol (LSP):\n- Zed automatically enables LSP-based completions for supported languages\n- Make sure you have the relevant language server installed for your programming language\n\n3. Path-based Completion:\n- When typing file paths, Zed will suggest completions based on your file system\n\n4. Symbol-based Completion:\n- Press Ctrl+Space (Cmd+Space on Mac) to manually trigger completions\n- This works for symbols, variables, and functions in your code\n\n5. Snippet Completion:\n- Type the snippet prefix and press Tab\n- Zed includes many built-in snippets for different languages\n\nTo ensure autocompletion works properly:\n1. Make sure your project has proper language support configured\n2. Check that language servers are installed and running\n3. Verify your Zed settings aren't blocking autocompletion\n\nIf you're having issues, you can:\n- Check the language server status in the status bar\n- Look for any error messages in the logs\n- Verify your project's configuration\n\nRemember that autocompletion capabilities may vary depending on the programming language and available language servers.\nfor cpp how to install lsp server\n\nFor C/C++ in Zed, you'll need to install `clangd` as the LSP server. Here's how to do it:\n\n1. Using a Package Manager:\n\n**On macOS (using Homebrew):**\n```bash\nbrew install llvm\n# clangd comes with llvm\n```\n\n**On Ubuntu/Debian:**\n```bash\nsudo apt-get update\nsudo apt-get install clangd\n```\n\n**On Arch Linux:**\n```bash\nsudo pacman -S clang\n```\n\n2. Alternative Method - Using NPM:\n```bash\nnpm i -g @clangd/install\n```\n\n3. Verify Installation:\n```bash\nclangd --version\n```\n\n4. For Zed to work properly with C/C++, you might also need:\n- A `compile_commands.json` file in your project root\n- Or a `.clangd` configuration file\n\n5. To generate `compile_commands.json`:\n- If using CMake:\n```bash\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .\n```\n- If using Make, you can use Bear:\n```bash\nbear -- make\n```\n\nAfter installation, Zed should automatically detect and use clangd for C/C++ files. If it doesn't work immediately, try restarting Zed.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1022}}},{"id":{"replica_id":0,"value":20},"start":39,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1023}}},{"id":{"replica_id":0,"value":21},"start":1337,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1024}}},{"id":{"replica_id":0,"value":68},"start":1372,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1025}}},{"id":{"replica_id":0,"value":69},"start":2304,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1026}}}],"summary":"Zed Editor Autocompletion Configuration Setup","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}],"thought_process_output_sections":[]}